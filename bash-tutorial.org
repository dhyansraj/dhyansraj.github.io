#+TITLE:     Bash Tutorial
#+AUTHOR:    Dhyan Raj
#+EMAIL:     dhyan.raj@synechron.com
#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup
#+OPTIONS: num:0 whn:2 toc:3 H:6 ^:nil
#+HTML_HEAD: <style> #content{max-width:1800px;}</style>
#+HTML_HEAD: <style> p{max-width:1800px;}</style>
#+HTML_HEAD: <style> li{max-width:800px;}</style>
#+HTML_HEAD: <style> #table-of-contents{overflow:hidden;}</style>
#+HTML_HEAD: <style> pre.src:hover:before {display:none;}</style>
#+PROPERTY: header-args :exports both
#+INCLUDE: code.inc
#+CALL: init()

* Introduction
** Background
*GNU Bash* or simply *Bash* is a Unix shell and command language written by Brian Fox for the GNU Project as a free software replacement for the Bourne shell. Bash has many high-level language. Along with other powerful Linux tools and external programs, we can write very capable programs in Bash script.
* Variables
** Simple usage
#+begin_src shell :results scalar
name=Dhyan
age=39

echo Hello $name, you dont look like $age
#+end_src

#+RESULTS:
#+begin_example
Hello Dhyan, you dont look like 39
#+end_example
** Inline usage
#+begin_src shell :results scalar
i=10

echo The code is e$ib   # Gives wrong output
echo The code is e${i}b # Correct output
#+end_src

#+RESULTS:
#+begin_example
The code is e
The code is e10b
#+end_example
** Arithmetic Operations on variables 
#+begin_src shell
a=1
b=2

echo $(( a + b ))
#+end_src

#+RESULTS:
#+begin_example
3
#+end_example
** Increment variable
#+begin_src shell
i=1

let "i=i+1"
echo $i

let "i+=1"
echo $i

let "i++"
echo $i
#+end_src

#+RESULTS:
| 2 |
| 3 |
| 4 |

* Arrays
** Single Dimensional Arrays
*** Declaration 
#+begin_src shell :results verbatim
arr=(Bash "is simple" yet powerful )
echo ${arr[0]}
echo ${arr[1]}
#+end_src

#+RESULTS:
#+begin_example
Bash
is simple
#+end_example
*** Array Length
#+begin_src shell :results verbatim

arr=(Bash "is simple" yet powerful )

echo "arr has "${#arr[@]}" elements"
#+end_src

#+RESULTS:
#+begin_example
arr has 4 elements
#+end_example

** Multi Dimensional Arrays
#+begin_src shell
declare -A aa
aa[shell]=Bash
aa[editor]=Emacs

echo We are using ${aa[shell]} in this tutorial and is generated with ${aa[editor]}
#+end_src

#+RESULTS:
#+begin_example
We are using Bash in this tutorial and is generated with Emacs
#+end_example

* Bash Script parameters
** Passing parameters to Bash scripts
It is possible to pass multiple parameters to a Bash script. The parameters are accessible inside script as $1, $2, $3 etc. 
#+begin_src shell :results verbatim
cat lib/bash_parameters_test_1.sh 
#+end_src

#+RESULTS:
#+begin_example
#!/bin/bash

echo First Parameter $1
echo Second Parameter $2
echo Third Parameter $3
#+end_example

#+begin_src shell :results verbatim
lib/bash_parameters_test_1.sh Hello World
#+end_src

#+RESULTS:
#+begin_example
First Parameter Hello
Second Parameter World
Third Parameter
#+end_example

#+begin_note
Use $0 to access the name of the script
#+end_note

** Accessing all parameters
Use $@ to access all parameters
#+begin_src shell :results verbatim
cat lib/bash_parameters_test_2.sh 
#+end_src

#+RESULTS:
#+begin_example
#!/bin/bash

echo All Parameters passed to this script are $@
#+end_example

#+begin_src shell :results verbatim
lib/bash_parameters_test_2.sh We can send many parameters to bash script and access them using '$@'
#+end_src

#+RESULTS:
#+begin_example
All Parameters passed to this script are We can send many parameters to bash script and access them using $@
#+end_example

#+begin_note
Use $@ in for loop to iterate through each parameter

#+begin_src shell
for i in $@; do
    echo $i
done

#+end_src
#+end_note


* Control Statements
** If 
*** Simple If
#+begin_src shell
result=OK

if [ $result == "OK" ]; then
  echo Everything seems to be OK
fi
#+end_src

#+RESULTS:
#+begin_example
Everything seems to be OK
#+end_example

#+begin_src shell
status=200

if [ $status == 200 ]; then
  echo It went well
fi
#+end_src

#+RESULTS:
#+begin_example
It went well
#+end_example
*** If..Else
#+begin_src shell
result=OOPS

if [ $result == "OK" ]; then
  echo Everything seems to be OK
else
  echo Something went wrong
fi
#+end_src

#+RESULTS:
#+begin_example
Something went wrong
#+end_example
*** If..Else if..Else
#+begin_src shell
result=RETRY

if [ $result == "OK" ]; then
  echo Everything seems to be OK
elif [ $result == "RETRY" ]; then
  echo Lets try again
else
  echo Something went wrong
fi
#+end_src

#+RESULTS:
#+begin_example
Lets try again
#+end_example

#+begin_note
else if in *Bash* is =elif=
#+end_note
*** if file exists
#+begin_src shell :results scalar

f=output/test.txt

if [ -f $f ]; then
  cat $f
else 
  echo File doesn\'t exist
fi 

echo "This file is now created" > output/test.txt

if [ -f $f ]; then
  cat $f
else 
  echo File doesn\'t exist
fi 

#+end_src

#+RESULTS:
#+begin_example
File doesn't exist
This file is now created
#+end_example
*** if directory exists
#+begin_src shell :results scalar

f=output/accounts

if [ -d $f ]; then
  echo accounts directory exist
else 
  echo directory doesn\'t exist
fi 

mkdir output/accounts

if [ -d $f ]; then
  echo accounts directory exist
else 
  echo directory doesn\'t exist
fi 

#+end_src

#+RESULTS:
#+begin_example
directory doesn't exist
accounts directory exist
#+end_example
** Conditional Operators
*** Example
#+begin_src shell :results verbatim

marks=85

if [ $marks -ge 80 ]; then
    echo "You passed with distinction"
fi 

#+end_src

#+RESULTS:
#+begin_example
You passed with distinction
#+end_example

#+begin_src shell :results verbatim

age=12

if [ $age -le 15 ]; then
    echo "You can't apply for driver license yet"
fi 

#+end_src

#+RESULTS:
#+begin_example
You can't apply for driver license yet
#+end_example
*** List of Operators
| Operator      | Description                                   |
|---------------+-----------------------------------------------|
| arg1 *-eq* arg2    | True if arg1 equals arg2                      |
| arg1 *-ne* arg2 | True if arg1 is not equal to arg2             |
| arg1 *-lt* arg2 | True if arg1 is less than arg2                |
| arg1 *-le* arg2 | True if arg1 is less than or equal to arg2    |
| arg1 *-gt* arg2 | True if arg1 is greater than arg2             |
| arg1 *-ge* arg2 | True if arg1 is greater than or equal to arg2 |

** For loop
#+begin_src shell
for i in 1 2 3 4 5; do
  echo $i
done
#+end_src

#+RESULTS:
| 1 |
| 2 |
| 3 |
| 4 |
| 5 |
#+begin_src shell
for i in {1..10}; do
  echo $i
done
#+end_src

#+RESULTS:
|  1 |
|  2 |
|  3 |
|  4 |
|  5 |
|  6 |
|  7 |
|  8 |
|  9 |
| 10 |
#+begin_src shell
for i in {1..10..2}; do
  echo $i
done
#+end_src

#+RESULTS:
| 1 |
| 3 |
| 5 |
| 7 |
| 9 |
* Functions
Although statements can be written one after another, it would be ideal to group statements into functions or files for understand-ability and manageability. Multiple statements can be grouped in Bash script using the keyword */function/*. Functions can be called with parameters as well. 

# There are two ways to invoke another script
# - Execute the script using . operator (E.g =./another-script.sh=) 
# - Include the script and invoke statements as if they were written in the current script (E.g =source ./another-script.sh=)
** Simple Function Declarations
Statements are executed in the order they are written, but function declarations are not executed unless they are invoked explicitly from other statements.

#+begin_src shell
function aFunction() {
    echo "aFunction is called"
}
#+end_src

#+begin_note
Above statement if executed produces no output since the function aFunction is never invoked from anywhere
#+end_note

** Function calls

#+begin_src shell
function aFunction() {
    echo "aFunction is called"
}

aFunction
#+end_src

#+RESULTS:
#+begin_example
aFunction is called
#+end_example

** Function calls with parameters

#+begin_src shell :results verbatim
function happyNewYear() {
    a=$1
    b=$2
    echo "Hello" $a," Welcome to" $b
}

happyNewYear Dhyan 2020
#+end_src

#+RESULTS:
#+begin_example
Hello Dhyan, Welcome to 2020
#+end_example

* Built-In Utilities
** Sequence generator
*** seq
#+begin_src shell
echo `seq 5`
#+end_src

#+RESULTS:
#+begin_example
1 2 3 4 5
#+end_example
*** seq with fixed width
This is useful to generate fixed length numbers. Will be padded with zeros to the largest number
#+begin_src shell
echo `seq -w 50`
#+end_src

#+RESULTS:
#+begin_example
01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
#+end_example

#+begin_src shell
echo `seq -w 1000`
#+end_src

#+RESULTS:
#+begin_example

#+end_example
*** Looping with seq
#+begin_src shell
for i in $(seq 5); do
   echo $i
done
#+end_src

#+RESULTS:
| 1 |
| 2 |
| 3 |
| 4 |
| 5 |

*** Looping with seq and interval
#+begin_src shell
for i in $(seq 1 5 15); do
   echo $i
done
#+end_src

#+RESULTS:
|  1 |
|  6 |
| 11 |

*** Multi-Loops with seq and interval
You can skip some cycles with multiple =seq= in the same loop. 
#+begin_src shell
for i in $(seq 1 5 15; seq 50 10 100); do
   echo $i
done
#+end_src

#+RESULTS:
|   1 |
|   6 |
|  11 |
|  50 |
|  60 |
|  70 |
|  80 |
|  90 |
| 100 |

** Date 
*** Seconds since Epoch 
#+begin_src shell
echo `date +%s`
#+end_src

#+RESULTS:
#+begin_example
1574787849
#+end_example

*** Time elapsed
#+begin_src shell
startTime=$(date +%s)
sleep 2
elapsedTime="$(($(date +%s)-$startTime ))"

echo Was sleeping for $elapsedTime 
#+end_src

#+RESULTS:
#+begin_example
Was sleeping for 2
#+end_example

*** Formatting time
#+begin_src shell
currentTime=$(date +%s)

echo "Current Time: " $(date -d@$currentTime -u +%H:%M:%S)
#+end_src

#+RESULTS:
#+begin_example
Current Time:  17:04:12
#+end_example
** PID
*** PID of most recently executed background job
#+begin_src shell
sleep 2 &
echo $!
#+end_src

#+RESULTS:
#+begin_example
4163
#+end_example

* External Utilities
** Curl
*** Ignore SSL
#+begin_src shell :exports code
curl -k https://yarchive.net
#+end_src

#+RESULTS:
*** Get HTTP Status code
#+begin_src shell
response=$(curl -k -m 1 --write-out %{http_code} --silent --output /dev/null https://www.google.com )

echo $response
#+end_src

#+RESULTS:
#+begin_example
200
#+end_example
** SED
*** Replace String
#+begin_src shell :results verbatim
cat input/application.properties
#+end_src

#+RESULTS:
#+begin_example
/home/dhyan/blockchain/github/dhyansraj.github.io
host=HOST_NAME
port=PORT
application_name=JEDI
#+end_example

#+begin_src shell :results verbatim

PATTERN="s/HOST_NAME/www.google.com/g"
sed $PATTERN input/application.properties
#+end_src

#+RESULTS:
#+begin_example
host=www.google.com
port=PORT
application_name=JEDI
#+end_example

** JQ
*TODO*
** XARGS
*TODO*
** TEE
